# ***An open-source, simplified prototype of a dynamic hashing system that generates random hash codes that continuously change in real time..***
import time
from time import strftime
import hashlib

# Choose hash function type
hash_function = "MD5"  # You can change to "BLAKE2", "DJB2", or "SHA3-256"

while True:
    # Static keys
    special_key_open = "0123456789"
    special_key_closed = "9876543210"
    # Time-based key
    special_datetime_key = strftime("%y%m%d%H%M%S")

    # Combine keys and datetime string
    combined_string = special_key_open + special_key_closed + special_datetime_key

    # Apply selected hash function
    if hash_function == "SHA3-256":
        result_hash = hashlib.sha3_256(combined_string.encode()).hexdigest()
    elif hash_function == "MD5":
        result_hash = hashlib.md5(combined_string.encode()).hexdigest()
    elif hash_function == "BLAKE2":
        result_hash = hashlib.blake2b(combined_string.encode()).hexdigest()
    elif hash_function == "DJB2":
        # DJB2 hash function implemented manually
        hash_value = 5381
        for char in combined_string:
            hash_value = ((hash_value << 5) + hash_value) + ord(char)  # hash * 33 + c
        result_hash = hex(hash_value & 0xFFFFFFFFFFFFFFFF)  # Output as a 64-bit hex value
    else:
        raise ValueError("Unsupported hash function type")

    # Print the resulting hash, updating every second
    print(result_hash, end="\r", flush=True)
    time.sleep(1)
